name: Release

on:
  workflow_dispatch:
    inputs:
      release_bump:
        description: 'Release bump (ignored if version_override is provided)'
        required: true
        default: 'Minor'
        type: choice
        options:
          - Major
          - Minor
          - Patch
      version_override:
        description: 'Optional: manually specify version (e.g., v1.3.0)'
        required: false
        type: string


permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.1'

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      - name: Calculate new version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            new_version=${{ github.event.inputs.version_override }}
          else
            current_version=${LATEST_TAG#v}
            IFS='.' read -r major minor patch <<< "$current_version"
            case "${{ github.event.inputs.release_bump }}" in
              "Major")
                new_version="v$((major + 1)).0.0"
                ;;
              "Minor")
                new_version="v${major}.$((minor + 1)).0"
                ;;
              "Patch")
                new_version="v${major}.${minor}.$((patch + 1))"
                ;;
            esac
          fi
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "Calculated new version: $new_version"

      - name: Create and push new tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}