{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DEP DEMO This project uses MkDocs. For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Dep Demo Development Environment Using Devbox This project uses devbox for development environment management. To get started: First Time Setup : ```bash # Install devbox curl -fsSL https://get.jetpack.io/devbox | bash # Initialize devbox devbox init # Add nushell to devbox devbox add nu ``` Regular Usage : ```bash # Enter devbox environment devbox shell # Start nushell (optional) nu ``` Running the Application Local Development Run the Go Application : bash go run main.go The server will start at http://localhost:8080 Build the Binary : bash go build -o hello-world main.go Docker and Kind Cluster Deployment Build Docker Image : bash docker build -t hello-world:latest . 2. Run Docker Container locally : bash docker run -p 8080:8080 hello-world:latest Kubernetes Deployment Create and Load into Kind Cluster : ```bash Create kind cluster kind create cluster Load the image into kind kind load docker-image my-hello-world:latest ``` Deploy to Kind Cluster : ```bash # Apply the deployment and service kubectl apply -f deployent.yml # Verify deployment kubectl get pods kubectl get services ``` Debugging Scrachg Container in Kind Add Ephemeral Debug Container : ```bash Get the pod name kubectl get pods Attach ephemeral debug container kubectl debug -it --image=alpine --target=hello ``` Inside Debug Container : ```bash Install debugging tools apk add curl wget netcat-openbsd Test service connectivity nc -zv hello-service 80 Make HTTP requests to service wget -q0- http://hello-service Check process information ps aux View network configuration ip addr ``` 3. Debugging Tips : - The ephmeral container shares the same network namespace as the target container - You can access the same filesystem as the scratch container - Debug container is temporary and will be removed when the session ends - No changes to the original deployment are required Exit and Cleanup : ```bash Exit the debug session exit The ephemeral contaier is automatically cleaned up ```","title":"Home"},{"location":"#dep-demo","text":"This project uses MkDocs. For full documentation visit mkdocs.org .","title":"DEP DEMO"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#dep-demo_1","text":"","title":"Dep Demo"},{"location":"#development-environment","text":"","title":"Development Environment"},{"location":"#using-devbox","text":"This project uses devbox for development environment management. To get started: First Time Setup : ```bash # Install devbox curl -fsSL https://get.jetpack.io/devbox | bash # Initialize devbox devbox init # Add nushell to devbox devbox add nu ``` Regular Usage : ```bash # Enter devbox environment devbox shell # Start nushell (optional) nu ```","title":"Using Devbox"},{"location":"#running-the-application","text":"","title":"Running the Application"},{"location":"#local-development","text":"Run the Go Application : bash go run main.go The server will start at http://localhost:8080 Build the Binary : bash go build -o hello-world main.go","title":"Local Development"},{"location":"#docker-and-kind-cluster-deployment","text":"Build Docker Image : bash docker build -t hello-world:latest . 2. Run Docker Container locally : bash docker run -p 8080:8080 hello-world:latest","title":"Docker and Kind Cluster Deployment"},{"location":"#kubernetes-deployment","text":"Create and Load into Kind Cluster : ```bash","title":"Kubernetes Deployment"},{"location":"#create-kind-cluster","text":"kind create cluster","title":"Create kind cluster"},{"location":"#load-the-image-into-kind","text":"kind load docker-image my-hello-world:latest ``` Deploy to Kind Cluster : ```bash # Apply the deployment and service kubectl apply -f deployent.yml # Verify deployment kubectl get pods kubectl get services ```","title":"Load the image into kind"},{"location":"#debugging-scrachg-container-in-kind","text":"Add Ephemeral Debug Container : ```bash","title":"Debugging Scrachg Container in Kind"},{"location":"#get-the-pod-name","text":"kubectl get pods","title":"Get the pod name"},{"location":"#attach-ephemeral-debug-container","text":"kubectl debug -it --image=alpine --target=hello ``` Inside Debug Container : ```bash","title":"Attach ephemeral debug container"},{"location":"#install-debugging-tools","text":"apk add curl wget netcat-openbsd","title":"Install debugging tools"},{"location":"#test-service-connectivity","text":"nc -zv hello-service 80","title":"Test service connectivity"},{"location":"#make-http-requests-to-service","text":"wget -q0- http://hello-service","title":"Make HTTP requests to service"},{"location":"#check-process-information","text":"ps aux","title":"Check process information"},{"location":"#view-network-configuration","text":"ip addr ``` 3. Debugging Tips : - The ephmeral container shares the same network namespace as the target container - You can access the same filesystem as the scratch container - Debug container is temporary and will be removed when the session ends - No changes to the original deployment are required Exit and Cleanup : ```bash","title":"View network configuration"},{"location":"#exit-the-debug-session","text":"exit","title":"Exit the debug session"},{"location":"#the-ephemeral-contaier-is-automatically-cleaned-up","text":"```","title":"The ephemeral contaier is automatically cleaned up"}]}